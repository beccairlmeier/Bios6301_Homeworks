#Run the tests a bunch of times and aggregate the results
tests <- replicate(num_tests, powerTest(num_patients))
#Return the number of times that value was below or equal to our alpha.
return(sum(tests <= alpha))
}
runTests(num_tests = 50)
powerTest <- function(num_patients = 100){
#Set the treatment group options
treatmentGroups <- c(0,1)
#Set the treatments
treatments <- sample(treatmentGroups, num_patients, replace = T)
#Draw outcome values
outcome_pre    <- rnorm(num_patients, mean = 60, sd = 20)
#Adjust based on treatment.
outcome_treat  <- ifelse(treatments==1, outcome + 5, outcome)
#grab pvalue from the lm.
p = summary(lm(outcome_treat ~ treatments))$coefficients[2,4]
return(p)
}
runTests <- function(num_tests = 1000, num_patients = 100, alpha = 0.05){
#Run the tests a bunch of times and aggregate the results
tests <- replicate(num_tests, powerTest(num_patients))
#Return the number of times that value was below or equal to our alpha.
return(sum(tests <= alpha))
}
runTests(num_tests = 50)
powerTest <- function(num_patients = 100){
#Set the treatment group options
treatmentGroups <- c(0,1)
#Set the treatments
treatments <- sample(treatmentGroups, num_patients, replace = T)
#Draw outcome values
outcome_pre    <- rnorm(num_patients, mean = 60, sd = 20)
#Adjust based on treatment.
outcome_treat  <- ifelse(treatments==1, outcome + 5, outcome)
#grab pvalue from the lm.
p = summary(lm(outcome_treat ~ treatments))$coefficients[2,4]
return(p)
}
runTests <- function(num_tests = 1000, num_patients = 100, alpha = 0.05){
#Run the tests a bunch of times and aggregate the results
tests <- replicate(num_tests, powerTest(num_patients))
#Return the number of times that value was below or equal to our alpha.
return(sum(tests <= alpha))
}
runTests(num_tests = 50)
powerTest <- function(num_patients = 100){
#Set the treatment group options
treatmentGroups <- c(0,1)
#Set the treatments
treatments <- sample(treatmentGroups, num_patients, replace = T)
#Draw outcome values
outcome_pre    <- rnorm(num_patients, mean = 60, sd = 20)
#Adjust based on treatment.
outcome_treat  <- ifelse(treatments==1, outcome + 5, outcome)
#grab pvalue from the lm.
p = summary(lm(outcome_treat ~ treatments))$coefficients[2,4]
return(p)
}
runTests <- function(num_tests = 1000, num_patients = 100, alpha = 0.05){
#Run the tests a bunch of times and aggregate the results
tests <- replicate(num_tests, powerTest(num_patients))
#Return the number of times that value was below or equal to our alpha.
return(sum(tests <= alpha))
}
runTests(num_tests = 50)
powerTest <- function(num_patients = 100){
#Set the treatment group options
treatmentGroups <- c(0,1)
#Set the treatments
treatments <- sample(treatmentGroups, num_patients, replace = T)
#Draw outcome values
outcome_pre    <- rnorm(num_patients, mean = 60, sd = 20)
#Adjust based on treatment.
outcome_treat  <- ifelse(treatments==1, outcome + 5, outcome)
#grab pvalue from the lm.
p = summary(lm(outcome_treat ~ treatments))$coefficients[2,4]
return(p)
}
runTests <- function(num_tests = 1000, num_patients = 100, alpha = 0.05){
#Run the tests a bunch of times and aggregate the results
tests <- replicate(num_tests, powerTest(num_patients))
#Return the number of times that value was below or equal to our alpha.
return(sum(tests <= alpha))
}
runTests(num_tests = 50)
powerTest <- function(num_patients = 100){
#Set the treatment group options
treatmentGroups <- c(0,1)
#Set the treatments
treatments <- sample(treatmentGroups, num_patients, replace = T)
#Draw outcome values
outcome_pre    <- rnorm(num_patients, mean = 60, sd = 20)
#Adjust based on treatment.
outcome_treat  <- ifelse(treatments==1, outcome + 5, outcome)
#grab pvalue from the lm.
p = summary(lm(outcome_treat ~ treatments))$coefficients[2,4]
return(p)
}
runTests <- function(num_tests = 1000, num_patients = 100, alpha = 0.05){
#Run the tests a bunch of times and aggregate the results
tests <- replicate(num_tests, powerTest(num_patients))
#Return the number of times that value was below or equal to our alpha.
return(sum(tests <= alpha))
}
runTests(num_tests = 50)
powerTest <- function(num_patients = 100){
#Set the treatment group options
treatmentGroups <- c(0,1)
#Set the treatments
treatments <- sample(treatmentGroups, num_patients, replace = T)
#Draw outcome values
outcome_pre    <- rnorm(num_patients, mean = 60, sd = 20)
#Adjust based on treatment.
outcome_treat  <- ifelse(treatments==1, outcome + 5, outcome)
#grab pvalue from the lm.
p = summary(lm(outcome_treat ~ treatments))$coefficients[2,4]
return(p)
}
runTests <- function(num_tests = 1000, num_patients = 100, alpha = 0.05){
#Run the tests a bunch of times and aggregate the results
tests <- replicate(num_tests, powerTest(num_patients))
#Return the number of times that value was below or equal to our alpha.
return(sum(tests <= alpha))
}
runTests(num_tests = 50)
powerTest <- function(num_patients = 100){
#Set the treatment group options
treatmentGroups <- c(0,1)
#Set the treatments
treatments <- sample(treatmentGroups, num_patients, replace = T)
#Draw outcome values
outcome_pre    <- rnorm(num_patients, mean = 60, sd = 20)
#Adjust based on treatment.
outcome_treat  <- ifelse(treatments==1, outcome + 5, outcome)
#grab pvalue from the lm.
p = summary(lm(outcome_treat ~ treatments))$coefficients[2,4]
return(p)
}
runTests <- function(num_tests = 1000, num_patients = 100, alpha = 0.05){
#Run the tests a bunch of times and aggregate the results
tests <- replicate(num_tests, powerTest(num_patients))
#Return the number of times that value was below or equal to our alpha.
return(sum(tests <= alpha))
}
runTests(num_tests = 50)
powerTest <- function(num_patients = 100){
#Set the treatment group options
treatmentGroups <- c(0,1)
#Set the treatments
treatments <- sample(treatmentGroups, num_patients, replace = T)
#Draw outcome values
outcome_pre    <- rnorm(num_patients, mean = 60, sd = 20)
#Adjust based on treatment.
outcome_treat  <- ifelse(treatments==1, outcome + 5, outcome)
#grab pvalue from the lm.
p = summary(lm(outcome_treat ~ treatments))$coefficients[2,4]
return(p)
}
runTests <- function(num_tests = 1000, num_patients = 100, alpha = 0.05){
#Run the tests a bunch of times and aggregate the results
tests <- replicate(num_tests, powerTest(num_patients))
#Return the number of times that value was below or equal to our alpha.
return(sum(tests <= alpha))
}
runTests(num_tests = 50)
powerTest <- function(num_patients = 100){
#Set the treatment group options
treatmentGroups <- c(0,1)
#Set the treatments
treatments <- sample(treatmentGroups, num_patients, replace = T)
#Draw outcome values
outcome_pre    <- rnorm(num_patients, mean = 60, sd = 20)
#Adjust based on treatment.
outcome_treat  <- ifelse(treatments==1, outcome + 5, outcome)
#grab pvalue from the lm.
p = summary(lm(outcome_treat ~ treatments))$coefficients[2,4]
return(p)
}
runTests <- function(num_tests = 1000, num_patients = 100, alpha = 0.05){
#Run the tests a bunch of times and aggregate the results
tests <- replicate(num_tests, powerTest(num_patients))
#Return the number of times that value was below or equal to our alpha.
return(sum(tests <= alpha))
}
runTests(num_tests = 50)
powerTest <- function(num_patients = 100){
#Set the treatment group options
treatmentGroups <- c(0,1)
#Set the treatments
treatments <- sample(treatmentGroups, num_patients, replace = T)
#Draw outcome values
outcome_pre    <- rnorm(num_patients, mean = 60, sd = 20)
#Adjust based on treatment.
outcome_treat  <- ifelse(treatments==1, outcome + 5, outcome)
#grab pvalue from the lm.
p = summary(lm(outcome_treat ~ treatments))$coefficients[2,4]
return(p)
}
runTests <- function(num_tests = 1000, num_patients = 100, alpha = 0.05){
#Run the tests a bunch of times and aggregate the results
tests <- replicate(num_tests, powerTest(num_patients))
#Return the number of times that value was below or equal to our alpha.
return(sum(tests <= alpha))
}
runTests(num_tests = 50)
powerTest <- function(num_patients = 100){
#Set the treatment group options
treatmentGroups <- c(0,1)
#Set the treatments
treatments <- sample(treatmentGroups, num_patients, replace = T)
#Draw outcome values
outcome_pre    <- rnorm(num_patients, mean = 60, sd = 20)
#Adjust based on treatment.
outcome_treat  <- ifelse(treatments==1, outcome + 5, outcome)
#grab pvalue from the lm.
p = summary(lm(outcome_treat ~ treatments))$coefficients[2,4]
return(p)
}
runTests <- function(num_tests = 1000, num_patients = 100, alpha = 0.05){
#Run the tests a bunch of times and aggregate the results
tests <- replicate(num_tests, powerTest(num_patients))
#Return the number of times that value was below or equal to our alpha.
return(sum(tests <= alpha))
}
runTests(num_tests = 50)
powerTest <- function(num_patients = 100){
#Set the treatment group options
treatmentGroups <- c(0,1)
#Set the treatments
treatments <- sample(treatmentGroups, num_patients, replace = T)
#Draw outcome values
outcome_pre    <- rnorm(num_patients, mean = 60, sd = 20)
#Adjust based on treatment.
outcome_treat  <- ifelse(treatments==1, outcome + 5, outcome)
#grab pvalue from the lm.
p = summary(lm(outcome_treat ~ treatments))$coefficients[2,4]
return(p)
}
runTests <- function(num_tests = 1000, num_patients = 100, alpha = 0.05){
#Run the tests a bunch of times and aggregate the results
tests <- replicate(num_tests, powerTest(num_patients))
#Return the number of times that value was below or equal to our alpha.
return(sum(tests <= alpha))
}
runTests(num_tests = 50)
powerTest <- function(num_patients = 100){
#Set the treatment group options
treatmentGroups <- c(0,1)
#Set the treatments
treatments <- sample(treatmentGroups, num_patients, replace = T)
#Draw outcome values
outcome_pre    <- rnorm(num_patients, mean = 60, sd = 20)
#Adjust based on treatment.
outcome_treat  <- ifelse(treatments==1, outcome + 5, outcome)
#grab pvalue from the lm.
p = summary(lm(outcome_treat ~ treatments))$coefficients[2,4]
return(p)
}
runTests <- function(num_tests = 1000, num_patients = 100, alpha = 0.05){
#Run the tests a bunch of times and aggregate the results
tests <- replicate(num_tests, powerTest(num_patients))
#Return the number of times that value was below or equal to our alpha.
return(sum(tests <= alpha))
}
runTests(num_tests = 50)
powerTest <- function(num_patients = 100){
#Set the treatment group options
treatmentGroups <- c(0,1)
#Set the treatments
treatments <- sample(treatmentGroups, num_patients, replace = T)
#Draw outcome values
outcome_pre    <- rnorm(num_patients, mean = 60, sd = 20)
#Adjust based on treatment.
outcome_treat  <- ifelse(treatments==1, outcome + 5, outcome)
#grab pvalue from the lm.
p = summary(lm(outcome_treat ~ treatments))$coefficients[2,4]
return(p)
}
runTests <- function(num_tests = 1000, num_patients = 100, alpha = 0.05){
#Run the tests a bunch of times and aggregate the results
tests <- replicate(num_tests, powerTest(num_patients))
#Return the number of times that value was below or equal to our alpha.
return(sum(tests <= alpha))
}
runTests(num_tests = 50)
runTests(num_tests = 1000, num_patients = 100)
runTests(num_tests = 1000, num_patients = 100)
```
runTests(num_tests = 1000, num_patients = 100)
runTests(num_tests = 1000, num_patients = 100)
runTests(num_tests = 1000, num_patients = 1000)
```
runTests <- function(num_tests = 1000, num_patients = 100, alpha = 0.05){
#Run the tests a bunch of times and aggregate the results
tests <- replicate(num_tests, powerTest(num_patients))
#Return the percentage of times that value was below or equal to our alpha.
return(sum(tests <= alpha)/num_tests)
}
runTests(num_tests = 1000, num_patients = 100)
runTests(num_tests = 1000, num_patients = 1000)
d <- read.csv("/Users/Nick/Dropbox/vandy/computing/homeworks/Bios6301_homeworks/data/proj_rb15.csv")
head(d)
d <- read.csv("/Users/Nick/Dropbox/vandy/computing/homeworks/Bios6301_homeworks/data/proj_rb15.csv")[,-2]
head(d)
d <- read.csv("/Users/Nick/Dropbox/vandy/computing/homeworks/Bios6301_homeworks/data/proj_rb15.csv")[,c(-1,-2)]
head(d)
cor(d)
?chol
install.packages("MASS")
library(Mass)
library(MASS)
mvrnorm(100, c(0, 0), matrix(c(1, 0.50, 0.50, 1), 2, 2))
?mvnorm
?mvrnorm
View(d)
colMeans(d)
length(colMeans(d))
test <- mvrnorm(30, colMeans(d), cor(d), 8,8)
test
cor(test)
cor(d)
head(d)
head(test)
tail(d)
test = matrix(1,3,3)
test
apply(test, function(i){return(i + rnorm(1))})
?apply
?mapply
?apply
test = matrix(1,3,3)
perturb = function(val){
return(val + rnorm(1))
}
apply(test, perturb)
apply(test, FUN = perturb)
apply(test,c(1, 2), FUN = perturb)
```
test = matrix(1,3,3)
perturb = function(val){
return(val + rnorm(1))
}
apply(test,c(1, 2), FUN = perturb)
test = matrix(1,3,3)
perturb = function(val){
return(val + rnorm(1))
}
apply(test,c(1, 2), FUN = perturb)
test = matrix(1,3,3)
perturb = function(val){
return(val + rnorm(1))
}
apply(test,c(1, 2), FUN = perturb)
test = matrix(1,3,3)
perturb = function(val){
return(val + rnorm(1))
}
apply(test,c(1, 2), FUN = perturb)
test = matrix(1,3,3)
perturb = function(val){
return(val + rnorm(1))
}
apply(test,c(1, 2), FUN = perturb)
test = matrix(1,3,3)
perturb = function(val){
return(val + rnorm(1))
}
apply(test,c(1, 2), FUN = perturb)
test = matrix(1,3,3)
perturb = function(val){
return(val + rnorm(1))
}
apply(test,c(1, 2), FUN = perturb)
test = matrix(1,3,3)
perturb = function(val){
return(val + rnorm(1))
}
apply(test,c(1, 2), FUN = perturb)
test = matrix(1,3,3)
perturb = function(val){
return(val + rnorm(1))
}
apply(test,c(1, 2), FUN = perturb)
test = matrix(1,3,3)
perturb = function(val){
return(val + rnorm(1))
}
apply(test,c(1, 2), FUN = perturb)
test = matrix(1,3,3)
perturb = function(val){
return(val + rnorm(1))
}
apply(test,c(1, 2), FUN = perturb)
return(val + rnorm(1, 0, 0.1))
test = matrix(1,3,3)
perturb = function(val){
return(val + rnorm(1, 0, 0.1))
}
apply(test,c(1, 2), FUN = perturb)
test = matrix(1,3,3)
perturb = function(val){
return(val + rnorm(1, 0, 0.1))
}
apply(test,c(1, 2), FUN = perturb)
test = matrix(1,3,3)
perturb = function(val){
return(val + rnorm(1, 0, 0.1))
}
apply(test,c(1, 2), FUN = perturb)
test = matrix(1,3,3)
perturb = function(val){
return(val + rnorm(1, 0, 0.1))
}
apply(test,c(1, 2), FUN = perturb)
test = matrix(1,3,3)
perturb = function(val){
return(val + rnorm(1, 0, 0.1))
}
apply(test,c(1, 2), FUN = perturb)
correl <- apply(cor(d),c(1, 2), FUN = perturb)
new_cor <- apply(cor(d),c(1, 2), FUN = perturb)
new_cor
new_cor - cor(d)
perturb = function(val) return(val + rnorm(1, 0, 0.05))
new_cor <- apply(cor(d),c(1, 2), FUN = perturb)
fake_approx <- mvrnorm(30, colMeans(d), new_cor, 8,8)
fake_approx
cor_aggregate <- matrix(0, 8,8)
cor_aggregate <- matrix(0, 8,8) #Initialize a matrix to hold the sums of correlation matrix results.
new_cor <- apply(cor(d),c(1, 2), FUN = perturb) #make a similar correlation matrix
fake_approx <- mvrnorm(30, colMeans(d), new_cor, 8,8) #Generate data with that correlation matrix
cor_aggregate = cor_aggregate + cor(fake_approx)
cor_aggregate
for(i in 1:10){
new_cor <- apply(cor(d),c(1, 2), FUN = perturb) #make a similar correlation matrix
fake_approx <- mvrnorm(30, colMeans(d), new_cor, 8,8) #Generate data with that correlation matrix
cor_aggregate = cor_aggregate + cor(fake_approx)
}
o
cor_aggregate
cor_aggregate/10
for(i in 1:100){
new_cor <- apply(cor(d),c(1, 2), FUN = perturb) #make a similar correlation matrix
fake_approx <- mvrnorm(30, colMeans(d), new_cor, 8,8) #Generate data with that correlation matrix
cor_aggregate = cor_aggregate + cor(fake_approx)
}
cor_aggregate/100
for(i in 1:1000){
new_cor <- apply(cor(d),c(1, 2), FUN = perturb) #make a similar correlation matrix
fake_approx <- mvrnorm(30, colMeans(d), new_cor, 8,8) #Generate data with that correlation matrix
cor_aggregate = cor_aggregate + cor(fake_approx)
}
cor_aggregate/1000
cor(fake_approx)
cor(d)
cor_aggregate <- matrix(0, 8,8) #Initialize a matrix to hold the sums of correlation matrix results.
n <- 10000
for(i in 1:n){
new_cor <- apply(cor(d),c(1, 2), FUN = perturb) #make a similar correlation matrix
fake_approx <- mvrnorm(30, colMeans(d), new_cor, 8,8) #Generate data with that correlation matrix
cor_aggregate = cor_aggregate + cor
}
cor_aggregate/n #Find average
cor_aggregate <- matrix(0, 8,8) #Initialize a matrix to hold the sums of correlation matrix results.
n <- 10000
for(i in 1:n){
new_cor <- apply(cor(d),c(1, 2), FUN = perturb) #make a similar correlation matrix
fake_approx <- mvrnorm(30, colMeans(d), new_cor, 8,8) #Generate data with that correlation matrix
cor_aggregate = cor_aggregate + cor
}
cor_aggregate/n #Find average
cor_aggregate <- matrix(0, 8,8) #Initialize a matrix to hold the sums of correlation matrix results.
n <- 10000
new_cor <- apply(cor(d),c(1, 2), FUN = perturb) #make a similar correlation matrix
fake_approx <- mvrnorm(30, colMeans(d), new_cor, 8,8) #Generate data with that correlation matrix
cor_aggregate = cor_aggregate + cor
cor_aggregate = cor_aggregate + cor(fake_approx)
cor_aggregate <- matrix(0, 8,8) #Initialize a matrix to hold the sums of correlation matrix results.
n <- 10000
for(i in 1:n){
new_cor <- apply(cor(d),c(1, 2), FUN = perturb) #make a similar correlation matrix
fake_approx <- mvrnorm(30, colMeans(d), new_cor, 8,8) #Generate data with that correlation matrix
cor_aggregate = cor_aggregate + cor(fake_approx)
}
cor_aggregate/n #Find average
cor(d)
(fake_exact <- mvrnorm(30, colMeans(d), cor(d), 8,8))
runTests(num_tests = 1000, num_patients = 100)
source('~/.active-rstudio-document', echo=TRUE)
print("--------------------------------------------------------------------------------------------------")
source('~/.active-rstudio-document', echo=TRUE)
powerTest <- function(num_patients = 100){
#Set the treatment group options
treatmentGroups <- c(0,1)
#Set the treatments
treatments <- sample(treatmentGroups, num_patients, replace = T)
#Draw outcome values
outcome_pre    <- rnorm(num_patients, mean = 60, sd = 20)
#Adjust based on treatment.
outcome_treat  <- ifelse(treatments==1, outcome + 5, outcome)
#grab pvalue from the lm.
p = summary(lm(outcome_treat ~ treatments))$coefficients[2,4]
return(p)
}
runTests <- function(num_tests = 1000, num_patients = 100, alpha = 0.05){
#Run the tests a bunch of times and aggregate the results
tests <- replicate(num_tests, powerTest(num_patients))
#Return the proportion of values below or equal to our alpha.
return(sum(tests <= alpha)/num_tests)
}
runTests(num_tests = 1000, num_patients = 100)
